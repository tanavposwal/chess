// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  emailVerified DateTime?
  image        String   @default("https://img.freepik.com/premium-vector/man-avatar-profile-picture-vector-illustration_268834-538.jpg")
  rating       Int      @default(1200)
  gamesAsWhite Game[]   @relation("GamesAsWhite")
  gamesAsBlack Game[]   @relation("GamesAsBlack")
  createdAt    DateTime @default(now())

  accounts      Account[]
  sessions      Session[]
  @@index([rating])
}

model Game {
  id            String      @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  whitePlayer   User        @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User        @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
  status        GameStatus
  result        GameResult?
  startingFen   String      @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1") // default value for the startingFen
  currentFen    String?
  startAt       DateTime    @default(now())
  endAt         DateTime?
  opening       String?
  event         String?

  @@index([status, result])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIME_UP
  PLAYER_EXIT
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
